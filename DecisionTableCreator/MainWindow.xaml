<Window x:Class="DecisionTableCreator.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:local="clr-namespace:DecisionTableCreator"
        mc:Ignorable="d"
        Title="{Binding Title, Mode=OneWay, UpdateSourceTrigger=PropertyChanged}" Height="600" Width="800" Icon="pack://application:,,,/DtcIcon.ico" Closing="Window_Closing" 
        AutomationProperties.AutomationId="MainWindow">
    <Window.DataContext>
        <local:DataContainer/>
    </Window.DataContext>
    <Window.CommandBindings>
        <CommandBinding Command="local:WpfCommands.AppendTestCase" Executed="AppendTestCase_Executed" CanExecute="AppendTestCase_OnCanExecute"/>
        <CommandBinding Command="local:WpfCommands.DeleteTestCase" Executed="DeleteTestCase_Executed" CanExecute="DeleteTestCase_OnCanExecute"/>
        <CommandBinding Command="local:WpfCommands.DeleteMostRightTestCase" Executed="DeleteMostRightTestCase_Executed" CanExecute="DeleteMostRightTestCase_OnCanExecute"/>
        <CommandBinding Command="local:WpfCommands.InsertTestCase" Executed="InsertTestCase_Executed" CanExecute="InsertTestCase_OnCanExecute"/>
        <CommandBinding Command="local:WpfCommands.EditConditionOrAction" Executed="EditConditionOrAction_Executed" CanExecute="EditConditionOrAction_OnCanExecute"/>
        <CommandBinding Command="local:WpfCommands.EditCondition" Executed="EditConditionOrAction_Executed" CanExecute="EditCondition_OnCanExecute"/>
        <CommandBinding Command="local:WpfCommands.EditAction" Executed="EditConditionOrAction_Executed" CanExecute="EditAction_OnCanExecute"/>
        <CommandBinding Command="local:WpfCommands.Save" Executed="Save_Executed" CanExecute="Save_OnCanExecute"/>
        <CommandBinding Command="local:WpfCommands.SaveAs" Executed="SaveAs_Executed" CanExecute="Save_OnCanExecute"/>
        <CommandBinding Command="local:WpfCommands.Open" Executed="Open_Executed" CanExecute="Open_OnCanExecute"/>
        <CommandBinding Command="local:WpfCommands.NewDocument" Executed="NewDocument_Executed" CanExecute="NewDocument_OnCanExecute"/>
        <CommandBinding Command="local:WpfCommands.AppendAction" Executed="AppendAction_Executed" CanExecute="AppendAction_OnCanExecute"/>
        <CommandBinding Command="local:WpfCommands.InsertAction" Executed="InsertAction_Executed" CanExecute="InsertAction_OnCanExecute"/>
        <CommandBinding Command="local:WpfCommands.DeleteAction" Executed="DeleteAction_Executed" CanExecute="DeleteAction_OnCanExecute"/>
        <CommandBinding Command="local:WpfCommands.AppendCondition" Executed="AppendCondition_Executed" CanExecute="AppendCondition_OnCanExecute"/>
        <CommandBinding Command="local:WpfCommands.InsertCondition" Executed="InsertCondition_Executed" CanExecute="InsertCondition_OnCanExecute"/>
        <CommandBinding Command="local:WpfCommands.DeleteCondition" Executed="DeleteCondition_Executed" CanExecute="DeleteCondition_OnCanExecute"/>
        <CommandBinding Command="local:WpfCommands.DeleteBottomCondition" Executed="DeleteBottomCondition_Executed" CanExecute="DeleteBottomCondition_OnCanExecute"/>
        <CommandBinding Command="local:WpfCommands.ExportToClipboard" Executed="ExportHtmlToClipboard_Executed" CanExecute="ExportHtmlToClipboard_OnCanExecute"/>
        <CommandBinding Command="local:WpfCommands.MoveConditionOrActionUp" Executed="MoveConditionOrActionUp_Executed" CanExecute="MoveConditionOrActionUp_OnCanExecute"/>
        <CommandBinding Command="local:WpfCommands.MoveConditionOrActionDown" Executed="MoveConditionOrActionDown_Executed" CanExecute="MoveConditionOrActionDown_OnCanExecute"/>
        <CommandBinding Command="local:WpfCommands.ExportToFileWithExternalTemplate" Executed="ExportToFileWithExternalTemplate_Executed" CanExecute="ExportToFileWithExternalTemplate_OnCanExecute"/>
        <CommandBinding Command="local:WpfCommands.CreateSampleProject" Executed="CreateSampleProject_Executed" CanExecute="CreateSampleProject_OnCanExecute"/>
        <CommandBinding Command="local:WpfCommands.Exit" Executed="Exit_Executed" CanExecute="Exit_OnCanExecute"/>
    </Window.CommandBindings>

    <Grid MaxHeight="{Binding RelativeSource={RelativeSource AncestorType={x:Type Window}}, Path=ActualHeight}">
        <Grid.Resources>
            <Style TargetType="ScrollViewer">
                <Setter Property="local:HorizonticalScrollSynchronizer.HorizonticalScrollGroup" Value="Group1" />
            </Style>
        </Grid.Resources>
        <Grid.ColumnDefinitions>
            <ColumnDefinition Width="20"/>
            <ColumnDefinition/>
            <ColumnDefinition Width="20"/>
        </Grid.ColumnDefinitions>
        <Grid.RowDefinitions>
            <RowDefinition Height="Auto"/>
            <RowDefinition Height="20"/>
            <RowDefinition Height="*"/>
            <RowDefinition Height="20"/>
            <RowDefinition Height="*"/>
            <RowDefinition Height="Auto"/>
        </Grid.RowDefinitions>
        <Grid.ContextMenu>
            <ContextMenu>
                <MenuItem Command="local:WpfCommands.AppendTestCase" CommandTarget="{Binding Path=PlacementTarget,RelativeSource={RelativeSource AncestorType={x:Type ContextMenu}}}"/>
                <MenuItem Command="local:WpfCommands.AppendCondition" CommandTarget="{Binding Path=PlacementTarget,RelativeSource={RelativeSource AncestorType={x:Type ContextMenu}}}"/>
                <MenuItem Command="local:WpfCommands.AppendAction" CommandTarget="{Binding Path=PlacementTarget,RelativeSource={RelativeSource AncestorType={x:Type ContextMenu}}}"/>
            </ContextMenu>
        </Grid.ContextMenu>
        <Menu Grid.Row="0" Grid.Column="0" Grid.ColumnSpan="3" HorizontalAlignment="Left" VerticalAlignment="Top">
            <MenuItem Header="File">
                <MenuItem AutomationProperties.AutomationId="MenuItemNewDocument"  Command="local:WpfCommands.NewDocument"/>
                <MenuItem Command="local:WpfCommands.Open"/>
                <MenuItem AutomationProperties.AutomationId="MenuItemSave"  Command="local:WpfCommands.Save"/>
                <MenuItem Command="local:WpfCommands.SaveAs"/>
                <MenuItem Command="local:WpfCommands.CreateSampleProject"/>
                <MenuItem AutomationProperties.AutomationId="MenuItemExit" Command="local:WpfCommands.Exit"/>
            </MenuItem>
            <MenuItem Header="Edit">
                <MenuItem AutomationProperties.AutomationId="MenuItemAppendTestCase"  Command="local:WpfCommands.AppendTestCase"/>
                <MenuItem AutomationProperties.AutomationId="MenuItemDeleteTestCase"  Command="local:WpfCommands.DeleteTestCase"/>
                <MenuItem AutomationProperties.AutomationId="MenuItemDeleteMostRightTestCase"  Command="local:WpfCommands.DeleteMostRightTestCase"/>
                <MenuItem Command="local:WpfCommands.EditCondition"/>
                <MenuItem Command="local:WpfCommands.EditAction"/>
                <MenuItem Command="local:WpfCommands.InsertCondition"/>
                <MenuItem AutomationProperties.AutomationId="MenuItemAppendCondition"  Command="local:WpfCommands.AppendCondition"/>
                <MenuItem AutomationProperties.AutomationId="MenuItemDeleteCondition"  Command="local:WpfCommands.DeleteCondition"/>
                <MenuItem AutomationProperties.AutomationId="MenuItemDeleteBottomCondition"  Command="local:WpfCommands.DeleteBottomCondition"/>
                <MenuItem Command="local:WpfCommands.InsertAction"/>
                <MenuItem Command="local:WpfCommands.AppendAction"/>
                <MenuItem Command="local:WpfCommands.DeleteAction"/>
                <MenuItem Command="local:WpfCommands.MoveConditionOrActionUp"/>
                <MenuItem Command="local:WpfCommands.MoveConditionOrActionDown"/>
            </MenuItem>
            <MenuItem Header="Export">
                <MenuItem Command="local:WpfCommands.ExportToClipboard"/>
                <MenuItem Header="External template" ItemsSource="{Binding ExportToFileItem}">
                    <!--<MenuItem Header="test1" Command="local:WpfCommands.ExportToFileWithExternalTemplate" CommandParameter="test"></MenuItem>-->
                </MenuItem>
            </MenuItem>
            <MenuItem Header="About" Click="About_OnClick"></MenuItem>
        </Menu>
           
        <DockPanel Grid.Row="2" Grid.Column="1" >
            <DataGrid Name="DataGridConditions" ItemsSource="{Binding Conditions}" FrozenColumnCount="1" AutoGeneratedColumns="DataGrid_OnAutoGeneratedColumns" AutoGeneratingColumn="DataGrid_OnAutoGeneratingColumn" SelectionUnit="Cell" 
                      IsTabStop="False" CanUserAddRows="False" CanUserDeleteRows="False" VerticalScrollBarVisibility="Auto" HorizontalScrollBarVisibility="Auto"  
                      ColumnReordering="DataGrid_OnColumnReordering" ColumnReordered="DataGrid_OnColumnReordered"
                      ComboBox.SelectionChanged="ComboBox_SelectionChanged" AutomationProperties.AutomationId="DataGridConditions" >
                <DataGrid.Resources>
                    <Style TargetType="DataGridCell">
                        <Setter Property="IsTabStop" Value="False"/>
                    </Style>
                </DataGrid.Resources>
            </DataGrid>
        </DockPanel>

        <GridSplitter Grid.Row="3" Grid.Column="1" HorizontalAlignment="Stretch" Height="5"/>

        <DockPanel Grid.Row="4" Grid.Column="1">
            <DataGrid Name="DataGridActions" ItemsSource="{Binding Actions}" FrozenColumnCount="1" AutoGeneratedColumns="DataGrid_OnAutoGeneratedColumns" AutoGeneratingColumn="DataGrid_OnAutoGeneratingColumn" SelectionUnit="Cell" 
                      IsTabStop="False" CanUserAddRows="False" CanUserDeleteRows="False" VerticalScrollBarVisibility="Auto" HorizontalScrollBarVisibility="Auto"  
                      ColumnReordering="DataGrid_OnColumnReordering" ColumnReordered="DataGrid_OnColumnReordered"
                       >
                <DataGrid.Resources>
                    <Style TargetType="DataGridCell">
                        <Setter Property="IsTabStop" Value="False"/>
                    </Style>
                </DataGrid.Resources>
            </DataGrid>
        </DockPanel>
        
        <StackPanel Grid.Row="5" Grid.Column="1">
            <StackPanel Orientation="Horizontal">
                <Label Margin="5" Content="Possible combinations"/>
                <TextBox Margin="5" MinWidth="60" Text="{Binding PossibleCombinations, Mode=OneWay, UpdateSourceTrigger=PropertyChanged}" IsReadOnly="True"></TextBox>
                <!--<TextBox Margin="5" MinWidth="60" Text="{Binding DirtyObserver.Dirty, Mode=OneWay}"/>
                <Button Content="ResetDirty" Click="ButtonBase_OnClick"></Button>-->
            </StackPanel>
            <StackPanel Orientation="Horizontal">
                <Label Margin="5" Content="Covered test cases"/>
                <TextBox Margin="5" MinWidth="60" Text="{Binding CoveredTestCases, Mode=OneWay, UpdateSourceTrigger=PropertyChanged}" IsReadOnly="True"></TextBox>
            </StackPanel>
            <StackPanel Orientation="Horizontal">
                <Label Margin="5" Content="Coverage"/>
                <TextBox Margin="5" MinWidth="60" Text="{Binding Coverage, Mode=OneWay, UpdateSourceTrigger=PropertyChanged, StringFormat=00.00}" IsReadOnly="True"></TextBox>
            </StackPanel>
        </StackPanel>
    </Grid>
</Window>
