using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Diagnostics;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Data;
using System.Windows.Documents;
using System.Windows.Input;
using System.Windows.Media;
using System.Windows.Media.Imaging;
using System.Windows.Navigation;
using System.Windows.Shapes;

namespace DecisionTableCreator
{
    /// <summary>
    /// Interaction logic for MainWindow.xaml
    /// </summary>
    public partial class MainWindow : Window
    {
        Dictionary<int, List<DataGridColumn>> _columnsDictionary = new Dictionary<int, List<DataGridColumn>>();

        public MainWindow()
        {
            InitializeComponent();
        }

        private void DataGrid_OnAutoGeneratingColumn(object sender, DataGridAutoGeneratingColumnEventArgs e)
        {
            DataGrid dataGrid = sender as DataGrid;
            DataGridTextColumn col = e.Column as DataGridTextColumn;

            //// exchange DataGridTextColumn with DataGridTemplateColumn and GridCellControl

            DataGridHeader header = new DataGridHeader(col.Header.ToString(), dataGrid.Columns.Count);

            DataGridTemplateColumn templateColumn = new DataGridTemplateColumn();
            templateColumn.Header = header;

            Binding bind = new Binding(col.Header.ToString());
            bind.Mode = BindingMode.TwoWay;

            FrameworkElementFactory gridCellControl = new FrameworkElementFactory(typeof(GridCellControl));
            gridCellControl.SetBinding(DataContextProperty, bind);
            DataTemplate dataTemplate = new DataTemplate();
            dataTemplate.VisualTree = gridCellControl;

            templateColumn.CellTemplate = dataTemplate;

            e.Column = templateColumn;
        }

        private void DataGrid_OnAutoGeneratedColumns(object sender, EventArgs e)
        {
            DataGrid dataGrid = (DataGrid)sender;
            for (int idx = 0; idx < dataGrid.Columns.Count; idx++)
            {
                DataGridColumn col = dataGrid.Columns[idx] as DataGridColumn;
                DataGridHeader header = (DataGridHeader)col.Header;

                // add sync column width
                AddToDictionary(header.ColumnIndex, col);
                var widthPropertyDescriptor = DependencyPropertyDescriptor.FromProperty(DataGridColumn.WidthProperty, typeof(DataGridColumn));
                var value = widthPropertyDescriptor.GetValue(col);
                widthPropertyDescriptor.AddValueChanged(col, ValueChangedHandler);
            }
        }

        void AddToDictionary(int index, DataGridColumn col)
        {
            if (_columnsDictionary.ContainsKey(index))
            {
                _columnsDictionary[index].Add(col);
            }
            else
            {
                _columnsDictionary.Add(index, new List<DataGridColumn>() { col });
            }
        }

        private void ValueChangedHandler(object sender, EventArgs eventArgs)
        {
            DataGridColumn col = sender as DataGridColumn;
            if (col != null)
            {
                DataGridHeader header = (DataGridHeader) col.Header;
                DataGridLength value = col.Width;
                foreach (DataGridColumn column in _columnsDictionary[header.ColumnIndex])
                {
                    if (!col.Equals(column))
                    {
                        column.Width = value;
                    }
                }
            }
            else
            {
                Trace.WriteLine("error in MainWindow.ValueChangedHandler");
            }
        }


        private void InsertColumn_OnCanExecute(object sender, CanExecuteRoutedEventArgs e)
        {
            e.CanExecute = true;
        }

    }
}
