using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Diagnostics;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Data;
using System.Windows.Documents;
using System.Windows.Input;
using System.Windows.Media;
using System.Windows.Media.Imaging;
using System.Windows.Navigation;
using System.Windows.Shapes;

namespace DecisionTableCreator
{
    /// <summary>
    /// Interaction logic for MainWindow.xaml
    /// </summary>
    public partial class MainWindow : Window
    {
        public MainWindow()
        {
            InitializeComponent();
        }

        DataContainer DataContainer { get { return (DataContainer)DataContext; } }

        private void DataGrid_OnAutoGeneratingColumn(object sender, DataGridAutoGeneratingColumnEventArgs e)
        {
            DataGrid dataGrid = sender as DataGrid;
            DataGridTextColumn col = e.Column as DataGridTextColumn;

            //// exchange DataGridTextColumn with DataGridTemplateColumn and GridCellControl

            DataGridHeader header = new DataGridHeader(col.Header.ToString(), dataGrid.Columns.Count);

            DataGridTemplateColumn templateColumn = new DataGridTemplateColumn();
            templateColumn.Header = header;

            Binding bind = new Binding(col.Header.ToString());
            bind.Mode = BindingMode.TwoWay;

            FrameworkElementFactory gridCellControl = new FrameworkElementFactory(typeof(GridCellControl));
            gridCellControl.SetBinding(DataContextProperty, bind);
            DataTemplate dataTemplate = new DataTemplate();
            dataTemplate.VisualTree = gridCellControl;

            templateColumn.CellTemplate = dataTemplate;

            e.Column = templateColumn;
        }

        private void DataGrid_OnAutoGeneratedColumns(object sender, EventArgs e)
        {
            DataGrid dataGrid = (DataGrid)sender;
            for (int idx = 0; idx < dataGrid.Columns.Count; idx++)
            {
                DataGridColumn col = dataGrid.Columns[idx] as DataGridColumn;

                // add sync column width
                AddToDictionary(dataGrid, col);
                var widthPropertyDescriptor = DependencyPropertyDescriptor.FromProperty(DataGridColumn.WidthProperty, typeof(DataGridColumn));
                widthPropertyDescriptor.AddValueChanged(col, ValueChangedHandler);
            }
        }


        #region SyncColumnWidth

        // dictionary for sync column width
        Dictionary<string, List<DataGridColumnContainer>> ColumnsWidthSyncDictionary = new Dictionary<string, List<DataGridColumnContainer>>();


        void AddToDictionary(DataGrid dataGrid, DataGridColumn col)
        {
            DataGridColumnContainer container = new DataGridColumnContainer(dataGrid, col);

            string key = GetColumnKey(container.Column.Header.ToString());
            if (ColumnsWidthSyncDictionary.ContainsKey(key))
            {
                var result = ColumnsWidthSyncDictionary[key].Where(cc => cc.DataGrid.Equals(dataGrid)).ToArray();
                foreach (DataGridColumnContainer cont in result)
                {
                    ColumnsWidthSyncDictionary[key].Remove(cont);
                }
                ColumnsWidthSyncDictionary[key].Add(container);
            }
            else
            {
                List<DataGridColumnContainer> colContainer = new List<DataGridColumnContainer>();
                ColumnsWidthSyncDictionary.Add(key, colContainer);
                colContainer.Add(container);
            }

        }

        string GetColumnKey(string name)
        {
            if (name.Contains("Action") || name.Contains("Condition"))
            {
               return "ConditionOrAction";
            }
            return name;
        }

        private void ValueChangedHandler(object sender, EventArgs eventArgs)
        {
            DataGridColumn col = sender as DataGridColumn;
            DataGridLength value = col.Width;
            foreach (DataGridColumnContainer column in ColumnsWidthSyncDictionary[GetColumnKey(col.Header.ToString())])
            {
                if (!col.Equals(column.Column))
                {
                    column.Column.Width = value;
                }
            }

        }

        #endregion

        private void InsertColumn_OnCanExecute(object sender, CanExecuteRoutedEventArgs e)
        {
            DataGrid dataGrid = e.Source as DataGrid;
            if (dataGrid != null)
            {
                DependencyObject dep = (DependencyObject)e.OriginalSource;
                if (dep != null)
                {
                    var parent = SearchForParent(dep, typeof(DataGridCell));
                    if (parent != null)
                    {
                        e.CanExecute = true;
                    }
                }
            }
        }

        private void InsertColumn_Executed(object sender, ExecutedRoutedEventArgs e)
        {
            var tcr = DataContainer.TestCasesRoot;
            tcr.AppendTestCase();
            DataContainer.TestCasesRoot = tcr;
        }


        DependencyObject SearchForParent(DependencyObject dep, Type typeofParent)
        {
            if (dep.GetType() == typeofParent)
            {
                return dep;
            }
            var parent = VisualTreeHelper.GetParent(dep);
            if (parent != null)
            {
                return SearchForParent(parent, typeofParent);
            }
            return null;
        }

        private void Test1_OnClick(object sender, RoutedEventArgs e)
        {
            //DataContainer.Conditions = null;
            //DataContainer.Actions= null;
        }

        private void Test2_OnClick(object sender, RoutedEventArgs e)
        {
            DataContainer.Conditions = DataContainer.TestCasesRoot.ConditionTable;
            DataContainer.Actions = DataContainer.TestCasesRoot.ActionTable;
        }

    }
}
